{"version":3,"sources":["components/Position/index.tsx","containers/PositionContainer.tsx","components/Home/index.tsx","components/Profile/index.tsx","components/Portfolio/index.tsx","components/Contact/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Position","onClick","className","PositionContainer","scrollInfo","index","e","current","target","Error","nodes","querySelectorAll","totHeight","i","clientHeight","$","animate","scrollTop","querySelector","classList","remove","currentTarget","parentElement","add","Home","id","Profile","portfolio","Contact","App","useRef","useEffect","document","viewHeight","onScroll","console","log","Portfolio","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4XAmBeA,MAbf,YAA6C,IAAzBC,EAAwB,EAAxBA,QAChB,OACI,yBAAKC,UAAU,YACX,4BACI,wBAAIA,UAAU,UAAS,4BAAQD,QAASA,EAAQ,IAAI,kCAAW,wCAC/D,4BAAI,4BAAQA,QAASA,EAAQ,IAAI,kCAAW,2CAC5C,4BAAI,4BAAQA,QAASA,EAAQ,IAAI,kCAAW,6CAC5C,4BAAI,4BAAQA,QAASA,EAAQ,IAAI,kCAAW,8CCiB7CE,MArBf,YAAuD,IAA1BC,EAAyB,EAAzBA,WAiBzB,OACI,kBAAC,EAAD,CAAUH,QAjBE,SAACI,GAAD,OAAmB,SAACC,GAAuD,IAAD,IACtF,IAAIF,IAAeA,EAAWG,UAAYH,EAAWG,QAAQC,OAAS,MAAM,IAAIC,MAAM,iBAItF,IAHA,IAAMD,EAASJ,EAAWG,QAAQC,OAC5BE,EAAQF,EAAOG,iBAAiB,qBAClCC,EAAY,EACRC,EAAE,EAAGA,EAAER,EAAM,EAAGQ,IACpBD,GAAaF,EAAMG,GAAGC,aAG1BC,IAAEP,GAAQQ,QAAQ,CACdC,UAAWL,GACZ,KACH,UAAAJ,EAAOU,cAAc,kBAArB,SAAiCC,UAAUC,OAAO,UAClD,UAAAd,EAAEe,cAAcC,qBAAhB,SAA+BH,UAAUI,IAAI,e,MCFtCC,MAlBf,WAEI,OACI,6BAAStB,UAAU,QACf,yBAAKuB,GAAG,MACJ,yBAAKA,GAAG,UACR,yBAAKA,GAAG,WACR,yBAAKA,GAAG,YAEZ,yBAAKvB,UAAU,QACX,0BAAMA,UAAU,QAAhB,+BACA,wBAAIA,UAAU,UAAd,UAA8B,0BAAMA,UAAU,UAAhB,c,MCD/BwB,MAVf,WAEI,OACI,6BAASxB,UAAU,WACf,kCACA,oC,MCEGyB,MAPf,WAEI,OACI,6BAASzB,UAAU,e,MCIZ0B,MAPf,WAEI,OACI,6BAAS1B,UAAU,aCgDZ2B,MAtCf,WACE,IAAMzB,EAAa0B,iBAA0B,MAuB7C,OArBAC,qBAAU,WACR,IAAMvB,EAASwB,SAASd,cAAc,QACtC,IAAIV,EAAU,MAAM,IAAIC,MAAM,uBAC9BL,EAAWG,QAAU,CACnBC,SACAyB,WAAYzB,EAAOM,aACnBG,UAAW,KAEb,IAcA,yBAAKf,UAAU,MAAMgC,SAZN,SAAC5B,GAChB,IAAME,EAAuCF,EAAEe,cAC/C,IAAIjB,IAAeA,EAAWG,QAAU,MAAM,IAAIE,MAAM,iBACxDL,EAAWG,QAAX,eACKH,EAAWG,QADhB,CAEEU,UAAWT,EAAOS,YAGpBkB,QAAQC,IAAIhC,EAAWG,QAAQU,aAK7B,kBAAC,EAAD,CAAmBb,WAAYA,IAC/B,yBAAKF,UAAU,SACf,6BAASA,UAAU,YACjB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAACmC,EAAD,MACA,kBAAC,EAAD,SCpCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFb,SAASc,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.6df97284.chunk.js","sourcesContent":["import React, { useRef } from 'react';\r\nimport './position.scss';\r\n\r\ntype PositionType = {\r\n    onClick : (i: number) => (e:React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\r\n}\r\nfunction Position ({onClick}: PositionType) {\r\n    return (\r\n        <nav className='position'>\r\n            <ul>\r\n                <li className='active'><button onClick={onClick(1)}><em>01</em><span>HOME</span></button></li>\r\n                <li><button onClick={onClick(2)}><em>02</em><span>Profile</span></button></li>\r\n                <li><button onClick={onClick(3)}><em>03</em><span>Portfolio</span></button></li>\r\n                <li><button onClick={onClick(4)}><em>04</em><span>Contact</span></button></li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Position;","import React, { useRef } from 'react';\r\nimport { findDOMNode } from 'react-dom';\r\nimport $ from 'jquery';\r\nimport Position from '../components/Position';\r\nimport { scrollType } from '../App';\r\n\r\ntype ScrollInfo = {\r\n    scrollInfo: React.MutableRefObject<scrollType | null>\r\n}\r\nfunction PositionContainer ({scrollInfo}: ScrollInfo) {\r\n    const onClick = (index: number) => (e:React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if(!scrollInfo || !scrollInfo.current || !scrollInfo.current.target){ throw new Error('Uncreated ref') };\r\n        const target = scrollInfo.current.target\r\n        const nodes = target.querySelectorAll('.contents section');\r\n        let totHeight = 0;\r\n        for(let i=0; i<index-1; i++) {\r\n            totHeight += nodes[i].clientHeight;\r\n        }\r\n        // DOM 조작 안하고 jquery 안 쓰는 방법 찾기\r\n        $(target).animate({\r\n            scrollTop: totHeight\r\n        }, 800);\r\n        target.querySelector('.active')?.classList.remove('active');\r\n        e.currentTarget.parentElement?.classList.add('active');\r\n    }\r\n\r\n    return (\r\n        <Position onClick={onClick} />\r\n    )\r\n}\r\nexport default PositionContainer;","import React from 'react';\r\nimport './home.scss';\r\n\r\nfunction Home () {\r\n\r\n    return (\r\n        <section className='home'>\r\n            <div id=\"bg\">\r\n                <div id=\"stars\"></div>\r\n                <div id=\"stars2\"></div>\r\n                <div id=\"stars3\"></div>\r\n            </div>\r\n            <div className=\"text\">\r\n                <span className=\"desc\">Front End Developer / React</span>\r\n                <h2 className=\"glitch\">BEYOND <span className=\"style1\">MYSELF</span></h2>\r\n                {/* <a href=\"#section2\" className=\"skew\"><span>I NEED YOU TO HIRE ME</span></a> */}\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport './profile.scss';\r\n\r\nfunction Profile () {\r\n\r\n    return (\r\n        <section className='Profile'>\r\n            <div>3</div>\r\n            <div>4</div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport './portfolio.scss';\r\n\r\nfunction portfolio () {\r\n\r\n    return (\r\n        <section className='portfolio'></section>\r\n    )\r\n}\r\n\r\nexport default portfolio;","import React from 'react';\r\nimport './contact.scss';\r\n\r\nfunction Contact () {\r\n\r\n    return (\r\n        <section className='contact'></section>\r\n    )\r\n}\r\n\r\nexport default Contact;","import React, { useRef, useEffect } from 'react';\nimport './components/style/Reset.scss';\nimport './App.scss';\n\nimport PositionContainer from './containers/PositionContainer';\nimport Home from './components/Home';\nimport Profile from './components/Profile';\nimport Portfolio from './components/Portfolio';\nimport Contact from './components/Contact';\n\n\nexport type scrollType = {\n  target: Element | null,\n  viewHeight: number,\n  scrollTop: number,\n}\nfunction App() {\n  const scrollInfo = useRef<scrollType | null>(null);\n\n  useEffect(() => {\n    const target = document.querySelector('.App');\n    if(!target) { throw new Error('Unmounted component'); }\n    scrollInfo.current = {\n      target,\n      viewHeight: target.clientHeight,\n      scrollTop: 0\n    }\n  },[]);\n\n  const onScroll = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n    const target: EventTarget & HTMLDivElement = e.currentTarget;\n    if(!scrollInfo || !scrollInfo.current){ throw new Error('Uncreated ref') };\n    scrollInfo.current = {\n      ...scrollInfo.current,\n      scrollTop: target.scrollTop\n    }\n\n    console.log(scrollInfo.current.scrollTop);\n  }\n\n  return (\n    <div className=\"App\" onScroll={onScroll}>\n      <PositionContainer scrollInfo={scrollInfo} />\n      <div className='menu'></div>\n      <section className='contents'>\n        <Home />\n        <Profile />\n        <Portfolio />\n        <Contact />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}