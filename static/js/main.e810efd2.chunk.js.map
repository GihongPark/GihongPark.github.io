{"version":3,"sources":["components/Position/index.tsx","components/Home/index.tsx","components/Profile/index.tsx","components/Portfolio/index.tsx","components/Contact/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Position","className","Home","id","Profile","portfolio","Contact","App","Portfolio","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6VAiBeA,MAdf,WAEI,OACI,yBAAKC,UAAU,YACX,4BACI,wBAAIA,UAAU,UAAS,gCAAQ,kCAAW,wCAC1C,4BAAI,gCAAQ,kCAAW,2CACvB,4BAAI,gCAAQ,kCAAW,6CACvB,4BAAI,gCAAQ,kCAAW,8C,MCUxBC,MAlBf,WAEI,OACI,6BAASD,UAAU,QACf,yBAAKE,GAAG,MACJ,yBAAKA,GAAG,UACR,yBAAKA,GAAG,WACR,yBAAKA,GAAG,YAEZ,yBAAKF,UAAU,QACX,0BAAMA,UAAU,QAAhB,+BACA,wBAAIA,UAAU,UAAd,UAA8B,0BAAMA,UAAU,UAAhB,c,MCD/BG,MAVf,WAEI,OACI,6BAASH,UAAU,WACf,kCACA,oC,MCEGI,MAPf,WAEI,OACI,6BAASJ,UAAU,e,MCIZK,MAPf,WAEI,OACI,6BAASL,UAAU,aCmBZM,MAff,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,SACf,6BAASA,UAAU,YACjB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAACO,EAAD,MACA,kBAAC,EAAD,SCPYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e810efd2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './position.scss';\r\n\r\nfunction Position () {\r\n\r\n    return (\r\n        <nav className='position'>\r\n            <ul>\r\n                <li className='active'><button><em>01</em><span>HOME</span></button></li>\r\n                <li><button><em>02</em><span>Profile</span></button></li>\r\n                <li><button><em>03</em><span>Portfolio</span></button></li>\r\n                <li><button><em>04</em><span>Contact</span></button></li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Position;","import React from 'react';\r\nimport './home.scss';\r\n\r\nfunction Home () {\r\n\r\n    return (\r\n        <section className='home'>\r\n            <div id=\"bg\">\r\n                <div id=\"stars\"></div>\r\n                <div id=\"stars2\"></div>\r\n                <div id=\"stars3\"></div>\r\n            </div>\r\n            <div className=\"text\">\r\n                <span className=\"desc\">Front End Developer / React</span>\r\n                <h2 className=\"glitch\">BEYOND <span className=\"style1\">MYSELF</span></h2>\r\n                {/* <a href=\"#section2\" className=\"skew\"><span>I NEED YOU TO HIRE ME</span></a> */}\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport './profile.scss';\r\n\r\nfunction Profile () {\r\n\r\n    return (\r\n        <section className='Profile'>\r\n            <div>3</div>\r\n            <div>4</div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport './portfolio.scss';\r\n\r\nfunction portfolio () {\r\n\r\n    return (\r\n        <section className='portfolio'></section>\r\n    )\r\n}\r\n\r\nexport default portfolio;","import React from 'react';\r\nimport './contact.scss';\r\n\r\nfunction Contact () {\r\n\r\n    return (\r\n        <section className='contact'></section>\r\n    )\r\n}\r\n\r\nexport default Contact;","import React from 'react';\nimport './components/style/Reset.scss';\nimport './App.scss';\n\nimport Position from './components/Position';\nimport Home from './components/Home';\nimport Profile from './components/Profile';\nimport Portfolio from './components/Portfolio';\nimport Contact from './components/Contact';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Position />\n      <div className='menu'></div>\n      <section className='contents'>\n        <Home />\n        <Profile />\n        <Portfolio />\n        <Contact />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}